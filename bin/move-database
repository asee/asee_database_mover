#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'yaml'
require File.join(File.dirname(File.dirname(__FILE__)),'/lib/database_mover')

SUB_COMMANDS = %w(projects init views dump deps mirror load refresh)
global_opts = Trollop::options do
  banner <<-EOS
 

Usage
-----

    move-database init
    move-database projects 

    move-database views <project> 
    move-database dump <project> 
    move-database deps <project> 
    move-database mirror <project> 

where [options] are:
EOS
  opt :dry_run, "Don't actually do anything", :short => "-n", :default => false
  opt :verbose, "Increase verbosity", :short => "-v"
  stop_on SUB_COMMANDS
end

dry_run = global_opts[:dry_run]

# pull command line arguments
cmd     = ARGV.shift # command to be executed
project = ARGV.shift # project on which to execute
src_env = ARGV.shift # source env (can be defaulted in config)
tgt_env = ARGV.shift # target env (can be defaulted in config)

# load configuration file (with template just in case)
config_path = File.join(File.dirname(File.dirname(__FILE__)), 'config', 'databases.yml')
config_template = File.join(File.dirname(File.dirname(__FILE__)), 'config', 'databases.example.yml')

# load in our configuration file
if File.exists?(config_path)
  config = YAML.load(File.open(config_path))
end


unless [nil, 'projects', 'init'].include?(cmd)
  # prepare variables for consumption by DatabaseMover class
  src_env ||= config['defaults']['env']['src']
  tgt_env ||= config['defaults']['env']['tgt']
  src_conf  = config['environments'][src_env].merge(config[project][src_env])
  tgt_conf  = config['environments'][tgt_env].merge(config[project][tgt_env])
  env_conf  = config['defaults'].merge(config[project])

  # create the database mover
  dbm = DatabaseMover.new(src_conf, tgt_conf, env_conf, dry_run)
end


case cmd
  when "init"
    unless File.exists?(config_path)
      `cp #{config_template} #{config_path}`
    else
      puts "#{config_path} exists. Manually remove it before initializing."
    end

  when "projects"
    puts config['projects']

  when "views"
    dbm.get_view_defs

  when "dump"
    dbm.dump_dbs

  when "load"
    dbm.load_dbs
    dbm.create_views

  when "refresh_views"
    dbm.create_views

  when "snapshot_views"
    dbm.snapshot_views

  when "full_snapshot"
    dbm.dump_dbs
    dbm.load_dbs
    dbm.snapshot_views
    dbm.purge_dumps unless dry_run

  when "mirror"
    dbm.dump_dbs
    dbm.load_dbs
    dbm.create_views
    dbm.purge_dumps

  when 'purge_dumps'
    dbm.purge_dumps


end
