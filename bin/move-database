#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'yaml'
require File.join(File.dirname(File.dirname(__FILE__)),'/lib/database_mover')

SUB_COMMANDS = %w(projects init views dump deps mirror load refresh)
global_opts = Trollop::options do
  banner <<-EOS
 

Usage
-----

    move-database init
    move-database projects 

    move-database views <project> 
    move-database dump <project> 
    move-database deps <project> 
    move-database mirror <project> 

where [options] are:
EOS
  opt :dry_run, "Don't actually do anything", :short => "-n", :default => false
  opt :verbose, "Increase verbosity", :short => "-v"
  stop_on SUB_COMMANDS
end

dry_run = global_opts[:dry_run] 
cmd = ARGV.shift
dot = File.expand_path("~/.asee_dbs.yml")
skl = File.join(File.dirname(File.dirname(__FILE__)), 'config', 'asee_dbs.example.yml')

if File.exists?(dot)
  cnf = YAML.load(File.open(dot))
  src = ENV.has_key?('RUN_SRC') ? ENV['RUN_SRC'] : cnf['defaults']['env']['src']
  tgt = ENV.has_key?('RUN_TGT') ? ENV['RUN_TGT'] : cnf['defaults']['env']['tgt']
end

unless [nil, 'projects', 'init'].include?(cmd)
  prj = ARGV.shift
  dbm = ASEE::DatabaseMover.new(prj, cnf, src, tgt, dry_run)
end

case cmd
  when "init"
    unless File.exists?(dot)
      `cp #{skl} #{dot}`
    else
      puts "#{dot} exists. Manually remove it before initializing."
    end

  when "projects"
    puts cnf['projects']

  when "show"
    dbm.show_configuration


  when "views"
    dbm.get_view_defs

  when "dump"
    views_hash = dbm.get_view_defs
    puts dbm.dump_db(views_hash)

  when "fix"
    dbm.fix_view_def

  when "deps"
    dbm.dump_deps

  when "load"
    dbm.load_db
    dbm.load_deps
    dbm.refresh_views

  when "refresh"
    dbm.refresh_views

  when "snapshot"
    views_hash = dbm.get_view_defs
    dbm.dump_db(views_hash)
    dbm.dump_deps
    dbm.load_db
    dbm.load_deps
    dbm.copy_views
    dbm.purge_dumps unless dry_run

  when "mirror"
    views_hash = dbm.get_view_defs
    dbm.dump_db(views_hash)
    dbm.dump_deps
    dbm.load_db
    dbm.load_deps
    dbm.get_view_defs
    dbm.refresh_views
    dbm.purge_dumps unless dry_run

end
