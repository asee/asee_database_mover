#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'yaml'
require File.join(File.dirname(File.dirname(__FILE__)),'/lib/database_mover')

SUB_COMMANDS = %w(projects move)
global_opts = Trollop::options do
  banner <<-EOS
 

Usage
-----

    move-database init
    move-database projects 

    move-database views <project> 
    move-database dump <project> 
    move-database deps <project> 
    move-database mirror <project> 

where [options] are:
EOS
  opt :dry_run, "Don't actually do anything", :short => "-n"
  opt :verbose, "Increase verbosity", :short => "-v"
  stop_on SUB_COMMANDS
end

cmd = ARGV.shift
dot = File.expand_path("~/.asee_dbs.yml")
skl = File.join(File.dirname(File.dirname(__FILE__)), 'config', 'asee_dbs.example.yml')

if File.exists?(dot)
  cnf = YAML.load(File.open(dot))
  src = ENV.has_key?('RUN_SRC') ? ENV['RUN_SRC'] : cnf['defaults']['env']['src']
  tgt = ENV.has_key?('RUN_TGT') ? ENV['RUN_TGT'] : cnf['defaults']['env']['tgt']
end


case cmd
  when "init"
    `cp #{skl} #{dot}`

  when "projects"
    puts cnf['projects']

  when "views"
    prj = ARGV.shift
    puts "Source #{src}, Target #{tgt}"
    dbm = ASEE::DatabaseMover.new(prj, cnf, src, tgt)
    dbm.get_view_defs

  when "dump"
    prj = ARGV.shift
    puts "Source #{src}, Target #{tgt}"
    dbm = ASEE::DatabaseMover.new(prj, cnf, src, tgt)
    views_hash = dbm.get_view_defs
    puts dbm.dump_db(views_hash)

  when "fix"
    prj = ARGV.shift
    puts "Source #{src}, Target #{tgt}"
    dbm = ASEE::DatabaseMover.new(prj, cnf, src, tgt)
    dbm.fix_view_def

  when "deps"
    prj = ARGV.shift
    puts "Source #{src}, Target #{tgt}"
    dbm = ASEE::DatabaseMover.new(prj, cnf, src, tgt)
    dbm.dump_deps

  when "load"
    prj = ARGV.shift
    puts "Source #{src}, Target #{tgt}"
    dbm = ASEE::DatabaseMover.new(prj, cnf, src, tgt)
    dbm.load_db
    dbm.load_deps
    dbm.refresh_views

  when "refresh"
    prj = ARGV.shift
    puts "Source #{src}, Target #{tgt}"
    dbm = ASEE::DatabaseMover.new(prj, cnf, src, tgt)
    dbm.refresh_views

  when "mirror"
    prj = ARGV.shift
    puts "Source #{src}, Target #{tgt}"
    dbm = ASEE::DatabaseMover.new(prj, cnf, src, tgt)
    views_hash = dbm.get_view_defs
    dbm.dump_db(views_hash)
    dbm.dump_deps
    dbm.load_db
    dbm.load_deps
    dbm.get_view_defs
    dbm.refresh_views

end
